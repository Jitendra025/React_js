----------------- This file containes the notes for section 6 of the Udeay react.js lecture---------------------
-----------The section 6 code started by using the previous section code in folder react-complete-guide-------------

----------------------------- Deep Dive in Component----------------------------------
1. Creating multiple components or divide one components in multipl components for simplicity.
2. Whatever rending try to creat seprate small components instead of writing all code in single component, simmilar to different small functions in c# or so


----------------------------Component Life cycle----------------------------------------
1. This is very important to understand  and for interview questions as well
 Component Life cycle (only availabe for class based components or say container components):
 Component Lifcyle has following methods/constructor and run in the following sequence during component creation:
  a. constructor(props) -->consutructor called at very first and received props from other components
  b. getDrivedStateFromProps(props,state) --> This run soon after constructor. This we can used to update the state in case some of the props changed and we need to perfomr state updation
                                          -->Should not be send any http request or anything like that in this method as it Cause side effects.
  c. render()--> After above two render method executes. This render method prepare and structure JSX code.
  d. RenderChidComponents --> Any component included in the render method then rendered. 
  e. componentDidMount() --> don;t update state in this when used as state update agian cause the re-rendering
  
  --------------------------- Component Creation lifcycle in action------------------------------
  .1 Add constructor in the classe based constructor
  we have added following in App.js
  constructor(props)
  {
    super(props); // Whenever add costructor we have to call super(), that invoke the costructor of Component class. Constructor can only be called/created in class based components and not in function based.
                  
  }

  As definded in above section we  have created methods of ;life cycle in App.js and seen them working in the order mentioned above. See App.js class for these methods.


  ---------------------------Component Update life cycle (for props changes)-------------------------
  1. Just like the life cycle of component creation there  is a life cycle for component updation as well (for props changes).
  methods and sequence of methods in component update life cycle
  1. getDrivedStateFromProps(props,state)--> generally used to Sync state to props. Should not be send any http request or anything like that in this method as it Cause side effects.
  2. shouldComponentUpdate(nextprops, nextState)--> In this method we can cancel the any change in the component. Decide whether to conitnue or not. Should not be send any http request or anything like that in this method as it Cause side effects.
  3. render()--> After above two render method executes. This render method prepare and structure JSX code.
  4. Update Child Components Props
  5. getSnapshotBeforeUpdate(preProps, preState)--> Will used for last minute DOM ops not like changing the DOM but things like the current scroll position of thr user.  Save some data before update and use it after the update in componentDdUpdate method
  6. ComponentDidUpdate()-->Here we can Cause side effects like request to Http and so but don't change the state else it will cause the re-rendring of the component as state change causes re-rendring.
                          --> stste chnage in this method will cause a re-rendring cycle again and again.

  For this section we have changed the persons and person components to class based components from function components.

  ---------------------------Component Update life cycle (for state changes)-------------------------
  1. This is same as changes as for changes in props but and can be invoked when there is any change in the state. So obvisouly will be defined in the class component where state is used.
   In out case we are using state in App.js only so will be adding some method of update life cycle to see how it works.

  Run the project for this cycle and check the console of developer tool in chrome to understand how the methods are getting called.


  From the life cycle methods
  componentDidMount, componemtDidUpdate and shouldComponentUpdate are most used methods.

  ----------------------------Using useEffect() in Functional Components--------------------------------
  1. useEffect() is availabel only in React 16 or above versions not before
  2. We will be using this in our Cockpit functional component.
  3. useEffect() is the second most important used hook after state. useEffect() is not life cycle hook but a React hook.
  4. Through useEffect() hook we cover all class based life hooks in Functional components. The two major one componentDidMount and componentDidUpdate are combined in one function.
  5.useEffect() invokes on every render cycle for example when component created, updated and re-rendered as main component re render.
  6. We can do Http request from useEffect as well. 
  7. We have used useEffect() for initial demo urpose in Cockpit.js functional component.
  8. Very important, I have to chanage the name of  function in Cockpit.js from cockpit to Cockpit. When I have added useEffect in cockpit function I was getting error as below:

  Error: React Hook "useEffect" is called in function "cockpit" which is neither a React function component or a custom React Hook function
  The above error fixed when I have changed the name from cockpit to Cockpit. The reason for this change is as below:
  Reason for change of name to caps:--> React component names need to start with a capital letter.  That's because React treats components starting with lowercase letters as DOM tags

  Note: useEffect needs to be added in the body of the function component. It cannot be wrapped into another function. useEffect will be called once the component is mounted



  -----------------------------------Controlling the useEffect() Behaviour-----------------------
  1.  As we know above the useEffect will be invoked for every re-render cycle but that will have impact on performace 
  2. How we can conrtol the execution of useEffect when we want i.e. based on condition
  3. We can use useEffect() mutltiple time in functional component if needed to run for different conditions

  see below multiple useEffect() for different condition in cockpit.js
  1. 
  useEffect(()=>{
        console.log('Cockpit.js useEffect()');
        alert('First use effect, will be called only once')
        // Http request can be done from here.
    },[]); // Notice the empty array [] here. The second parameter [] tells the dependency when the useEffect should call. If passed empty it will call only first time component will render.
            // if second parameter not [] passed as all i.e. [] is removefd from here , useEffect will be called for every rendring. .

2. 
    // Let we have a second useEffect which will call first time (this can't be control) and when there is any change in person property
    useEffect(()=>{
        console.log('Cockpit.js useEffect()');
        alert('Second use effect, will be called on load and when person changed')
        // Http request can be done from here.
    },[props.persons]); // now [props.person] tells that this useEffect will call if there is any change in the persons props. i.e when you change anything in the input text box 
                        // Any change in person will invoke this.

3. 
    // Let we have a third useEffect which will call on every render
    useEffect(()=>{
        console.log('Cockpit.js useEffect()');
        alert('Third use effect, will be called always on every render')
        // Http request can be done from here.
    }); // see second parameter [] is not there

--------------------------------Cleaning up the Life cycle Hooks and UseEffect()-----------------------------------
1. Cleaning up here is if we want to do some cleaning or closing of objects , some event listner before component removes from the dom.
2. As with Show/Hide button in App.js when we do hide we the component Person actually removes from the DOM, so if before component is getting removed from the DOM we want to do 
some work, some cleanup code that can be done using one more Life Cycle Hook that is

componentWillUnmount(). // This will only be called when component is removed from DOM (Hide also remove the component from DOM)
We have used the above in Persons.js class component.

3. Cleaup work can be done in useEffect(). This can be done by using a return statement havng an anonyms function
see below:
useEffect(()=>{
        console.log('Cockpit.js useEffect()');
        alert('First use effect, will be called only once')
        return(()=>{ // this will be called when component is about to remove from DOM and after every render cycle. or more precise , it runs before the main useEffect function and After the (first) render cycle
                      // That means useEffect() will be called only after the return statement of the functiona component executed and components are loaded/mounted in the DOM
            console.log('Cockpit.js clean up work here()')
        })
        // Http request can be done from here.
    },[]); 
Note te return statement above.

--------------------------Using shouldComponentUpdate for Optimization--------------------------
1. shouldComponentUpdate is a lifcycle hook through which we can cancel the any change in the component. Decide whether to conitnue or not allow update.
2. shouldComponentUpdate used for optimization to control the rendring due to any update in component
3. For example in App.js if we do any change in Cockpit it will render the whole App.js which will cause the re-rendring of Persons component where there is no chnage in Person
 we can avoid that using the shouldComponentUpdate method in classed based component
 shouldComponentUpdate(nextprops, nextState)
    {
        console.log('Persons.js shouldComponentUpdate method called');
        if(nextprops.person!==this.props.person) // check if property change then only re-render person and not due to change in any other component like Cockpit or App.js
        {
            return true; // render Persons only if there is any chnage in the person property of Persons
        }
        else
        {return false; // don't render}
        // we can change the upcoming props like below
        // this.props=nextprops; -------------commented for this exercise and will be used when will do more deep dive.
        //return true;
    }

    --------------------------Optimizing Functional using React.memo()--------------------------
    1. Change in Cockpit.js
    export default React.memo(Cockpit); // React.memo() prevent functional component to re render if there is no change in any of the dependent property of this component.


    ----------------PureCompoents instead of shouldComponentUpdate-------------------------------------------------
    1. Like in shouldComponentUpdate we check for person property is changed than only will allow re-rendring. What if there are muliple properties to check, yes that can be done using 
    if conditoion like
    shouldComponentUpdate(nextprops, nextState)
    {
        if(nextprops.person!==this.props.person !! nextprops.property2!==this.props.property2)  // multiple property check.
        {
            return true; // render Persons only if there is any chnage in the person property of Persons
        }
        else
        {return false; }// don't render
    }

    the above can be done uisng PureComponent
    To use PureComponent we have to extend PureComponent class instead of Component. And PureCompoent class has inbuilt shouldComponentUpdate that checks all properties and we don;t need
    to write shouldComponentUpdate explicitly.

    To use Pure Component following lines need to be changed in Persons.js.
    import React, {Component} from 'react'; Need to replcae with as below
    import React, {PureComponent} from 'react';

    class Persons extends Component{ ----Need to replcae with as below
    class Persons extends PureComponent{

      shouldComponentUpdate method to be remove. this should not be use when using PureComponent

-------------How react update the DOM------------------------------
1. How does React update the reacl DOM. The DOM in the browser?
2. When the render method called it does not immediatly update the real DOM.
3. render method first compare the virtual DOM. It has a copy of old Virtual DOM and Re-Render DOM
4. Render method compares the old and new virtual DOM and update the real DOM only if there is any differeneces. Also it update only those components in real DOM those are changed and 
not all components. For example if changes are in a singlre button only than only tha button will change not threplacede full real DOM. If there is no chnage there is no touch to real DOM.



---------------------------Rendring Adjacent JSX element-----------------------------------
1. As we remember in the very first courses we have mentioned that in the render method every JSX element should be wrapped in a root element.
like we did in App.js as follow: every element  {person}, {cockpit} is wrapped in a single div to give impression that it's returning a single objet.
 return (
          <div className="App">
            <Cockpit showPerson={this.state.showPerson}
            personsLength={this.state.Person.length}
            clicked={this.togglePersonHandler}></Cockpit>
          {person} 
          </div>
      );
2. But there is a way we can return multiple JSX elememts without wrapping in a single root. We can return elements in as an array. But in that array each elemet should have a key attribute
let see below as we  did chnage in Person.js:

before:
return (<StyledDev>
        <p onClick={this.props.click}>I am  {this.props.name} and I am {this.props.age} years old</p>  
        <p>{this.props.children}</p>  
        <input type="text" onChange={this.props.changed} value={this.props.name}></input>
        </StyledDev>
    );

After: Note the array element are seprataed by comma (,) and a key attribute added for each element
return [<p key ="Element1" onClick={this.props.click}>I am  {this.props.name} and I am {this.props.age} years old</p>,
        <p key ="Element2">{this.props.children}</p>,
        <input type="text" key ="Element3" onChange={this.props.changed} value={this.props.name}></input>
        ];

3. As above we have usd <div> (before code in point 1) to warp multiple component, instead of this we can use <React.Framegment> to warp a multiple element in a single root, in case we do not want to wrap in 
a html element or we don't want to send multiple elment in an array.

-------------------------------Higher Order Components (hoc)-Introduction-----------------------------------------
1. Higher order components are componets that worked as wrapper componnet. Like we wrapped our multiple components in a div element.
to do this we can create one hoc which is having a div element and in there all the childers components are passed.
2. We have done this in the WithClass hoc component under the hoc folder (all hoc component should go under hoc folder as per react guidline folder name can be other than hoc but recommended is hoc)
3. WithClass then used in the App.js return staement.

----------------------Another way of creating hoc component------------------
1. We have seen the one way we can create the hoc component in above section where we have created WithClass hoc component.
2. Here we have one more way to write hoc components.Check video 106 for this exercise on udemy. This will come later as well with code.

-------------------------Setting state correctly-----------------------------------
1. In the previous lessons we have learned that we can update the state using this.setState method like we did in App.js  as below:
 this.setState({
      Person:persons
    });
  
  But what if any state is dependent on the value of previous state: for example if we are changing the counter that is dependted on previous value of counter see below

 this.setState({
      Person:persons,
      counter:this.state.counter+1
    });
We can do the value of counter change as above but some time react not immediatly chnaged the state and if the next time or some where else we will be doing the same update we may not have the updated value of counter there
This can be overcome if we write the state update like this. This is needed only when we are changing the value of state variable based on some previous value of that or other variable

this.setState(prevState,props)=>{
  return{
    Person:persons,
      counter:prevState.counter+1
  };
};
 so in this scenario it will guarntee that counter is picking the latest last update value of counter.

 ---------------------------Using PropTypes-------------------------
 1. Here we will see how to receive props properly.
2. As we have passes props in the components and we want to ensure that the props are passed what is expected.
like for name we are expecting string for age we are expecting number and for click and changed in Persons we are expecting function.
This can be ensure using the PropTypes.
see the Person.js class where we have imported PropTypes and then defoned the type of different props in there
So as soon as you will pass a typepof value this is not expected for example string for age, you will see a warning in the developer tool.
Warning like below:

Warning: Failed prop type: Invalid prop `age` of type `string` supplied to `Person`, expected `number`.
    in Person (at Persons.js:49)
    in Persons (at App.js:86)
    in div (at App.js:85)
    in div (at WithClass.js:4)
    in withClass (at App.js:99)
    in App (at src/index.js:9)
    in StrictMode (at src/index.js:8)

--------------------------Using Refs---------------------------------------
1. ref keyword in react to get the current element in the list of element.
for example in the Perosns.js class we are rendring the list of person.js. And in the person.js there is one input element as well
Now how shoud I keep the last input in focus when page render, as the there can be any number of person and I need to keep text box in focus for last person
here ref keyword comes in picture that will pick the last element and bring that in focus.

ref keyword can be set and use in two ways,first using anonymus function and second by setting the property in constructor.  Person.js component has both of types defined.



------------------------How to use ref keyword in function components---------------------
1. As in the above section we have see using of Ref. property that is used in ref keyword is set in componentDidMount() life cycle hook method. But this lifecycle hook method is 
exist for the class based components and not in functional components.
Than how we should use ref in functional components?

We can use useRef in the functional compnent to use ref keyword in the functional components
in the cockpit.js functional component we have used the useRef and in the one of the useEffect method we have set the ref property as to click the button.


-------------------Using the Context API-------------------------------------------------
1. Context APi is used when we are passing props from to a chain of components.
 Like for example if we authenticated a user and set a flag authenticated as true and that flag we need to pass to our person and cockpit components, in that case we will be passing auth to persons then person and to conckpit aswell
 .
2. Context API is used to avoid this kind of props chain passing from component to component.
3. We have created the Auth-context.js under Context folder
4. Then we have used the AuthContext(name can be anything, here we have used authenticated named flag so name is AuthContext) to wrap those components only those will be using the authentication flag.



